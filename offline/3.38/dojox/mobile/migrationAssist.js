//>>built
define("dojox/mobile/migrationAssist","dojo/_base/declare dojo/_base/lang dojo/_base/window dojo/dom-class dojo/dom-construct dojo/dom-style dojo/ready dijit/_Container dijit/_WidgetBase ./_ItemBase ./common ./FixedSplitterPane ./Heading ./iconUtils ./ListItem ./RoundRect ./SpinWheel ./SpinWheelSlot ./SwapView ./TabBarButton ./ToolBarButton ./View".split(" "),function(g,h,d,v,k,p,w,m,q,D,e,x,y,z,b,A,r,f,B,t,u,C){var l;dojox.mobile.FlippableView=B;var n=new function(){this.dispatch=function(a,c){a=
a.replace(/.*\./,"");this["check"+a]&&this["check"+a](c)};this.checkCarousel=function(a){console.log("[MIG:error] Carousel has no backward compatibility, since it was experimental in 1.7. The new Carousel supports dojo/store instead of dojo/data.")};this.checkFixedSplitter=function(a){if(!this._fixedSplitter_css_checked){this._fixedSplitter_css_checked=!0;var c=k.create("div",{className:"mblFixedSplitter"},d.body());0==p.get(c,"height")&&(k.create("link",{href:"../themes/android/FixedSplitter.css",
type:"text/css",rel:"stylesheet"},d.doc.getElementsByTagName("head")[0]),console.log("[MIG:fixed] FixedSplitter.css does not seem to be loaded. Loaded it for you just now. It is in the device theme folder."));d.body().removeChild(c);setTimeout(function(){a.resize()},1E3)}};this.checkFixedSplitterPane=function(a){console.log("[MIG:fixed] FixedSplitterPane: Deprecated. Use dojox/mobile/Container instead.")};this.checkFixedSplitter=function(a){if(!this._fixedSplitter_css_checked){this._fixedSplitter_css_checked=
!0;var c=k.create("div",{className:"mblFixedSplitter"},d.body());0==p.get(c,"height")&&(k.create("link",{href:"../themes/android/FixedSplitter.css",type:"text/css",rel:"stylesheet"},d.doc.getElementsByTagName("head")[0]),console.log("[MIG:fixed] FixedSplitter.css does not seem to be loaded. Loaded it for you just now. It is in the device theme folder."));d.body().removeChild(c);setTimeout(function(){a.resize()},1E3)}};this.checkListItem=function(a){(void 0!==a.sync||a.srcNodeRef&&a.srcNodeRef.getAttribute("sync"))&&
console.log("[MIG:fixed] ListItem: The sync property is no longer supported. (async always)");if(void 0!==a.btnClass||a.srcNodeRef&&a.srcNodeRef.getAttribute("btnClass"))console.log("[MIG:fixed] ListItem: The btnClass property is no longer supported. Use rightIcon instead."),a.rightIcon=a.btnClass||a.srcNodeRef&&a.srcNodeRef.getAttribute("btnClass");if(void 0!==a.btnClass2||a.srcNodeRef&&a.srcNodeRef.getAttribute("btnClass2"))console.log("[MIG:fixed] ListItem: The btnClass2 property is no longer supported. Use rightIcon2 instead."),
a.rightIcon2=a.btnClass2||a.srcNodeRef&&a.srcNodeRef.getAttribute("btnClass2")};this.checkSpinWheelSlot=function(a){if(a.labels&&a.labels[0]&&"["===a.labels[0].charAt(0)){for(var c=0;c<a.labels.length;c++)a.labels[c]=a.labels[c].replace(/^\[*['"]*/,""),a.labels[c]=a.labels[c].replace(/['"]*\]*$/,"");console.log("[MIG:fixed] SpinWheelSlot: dojox/mobile/parser no longer accepts array-type attribute like labels\x3d\"['A','B','C','D','E']\". Specify as labels\x3d\"A,B,C,D,E\" instead.")}};this.checkSwapView=
function(a){(a=a.srcNodeRef)&&"dojox.mobile.FlippableView"===(a.getAttribute("dojoType")||a.getAttribute("data-dojo-type"))&&console.log("[MIG:fixed] FlippableView: FlippableView is no longer supported. Use SwapView instead.")};this.checkSwitch=function(a){"mblItemSwitch"===a["class"]&&console.log('[MIG:fixed] Switch: class\x3d"mblItemSwitch" is no longer necessary.')};this.checkTabBar=function(a){"segmentedControl"===(a.barType||a.srcNodeRef&&a.srcNodeRef.getAttribute("barType"))&&(console.log("[MIG:warning] TabBar: segmentedControl in 1.8 produces the same UI regardless of the current theme. See the inline doc in migrationAssist.js for details."),
k.create("style",{innerHTML:".iphone_theme .mblTabBarSegmentedControl .mblTabBarButtonIconArea { display: none; }"},d.doc.getElementsByTagName("head")[0]))};this.checkTabBarButton=function(a){0===(a["class"]||"").indexOf("mblDomButton")&&(console.log('[MIG:fixed] TabBarButton: Use icon\x3d"'+a["class"]+'" instead of class\x3d"'+a["class"]+'".'),a.icon=a["class"],a["class"]="",a.srcNodeRef&&(a.srcNodeRef.className=""))};this.checkToolBarButton=function(a){0===(a["class"]||"").indexOf("mblColor")&&
(console.log('[MIG:fixed] ToolBarButton: Use defaultColor\x3d"'+a["class"]+'" instead of class\x3d"'+a["class"]+'".'),a.defaultColor=a["class"],a["class"]="",a.srcNodeRef&&(a.srcNodeRef.className=""));0===(a["class"]||"").indexOf("mblDomButton")&&(console.log('[MIG:fixed] ToolBarButton: Use icon\x3d"'+a["class"]+'" instead of class\x3d"'+a["class"]+'".'),a.icon=a["class"],a["class"]="",a.srcNodeRef&&(a.srcNodeRef.className=""))}};q.prototype.postMixInProperties=function(){n.dispatch(this.declaredClass,
this);dojo.forEach([x,y,A,r,t,u,C],function(a){this.declaredClass!==a.prototype.declaredClass&&this instanceof a&&n.dispatch(a.prototype.declaredClass,this)},this)};g=function(a){h.extend(a,{select:function(c){console.log("[MIG:fixed] "+this.declaredClass+"(id\x3d"+this.id+'): Use set("selected", boolean) instead of select/deselect.');a.prototype.set.apply(this,["selected",!c])},deselect:function(){this.select(!0)}})};g(u);g(t);h.extend(b,{set:function(a,c){"btnClass"===a?(console.log("[MIG:fixed] "+
this.declaredClass+"(id\x3d"+this.id+'): Use set("rightIcon",x) instead of set("btnClass",x).'),a="rightIcon"):"btnClass2"===a&&(console.log("[MIG:fixed] "+this.declaredClass+"(id\x3d"+this.id+'): Use set("rightIcon2",x) instead of set("btnClass2",x).'),a="rightIcon2");q.prototype.set.apply(this,[a,c])}});h.extend(r,{getValue:function(){console.log('[MIG:fixed] SpinWheel: getValue() is no longer supported. Use get("values") instead.');return this.get("values")},setValue:function(a){console.log('[MIG:fixed] SpinWheel: setValue() is no longer supported. Use set("values",x) instead.');
return this.set("values",a)}});h.extend(f,{getValue:function(){console.log('[MIG:fixed] SpinWheelSlot: getValue() is no longer supported. Use get("value") instead.');return this.get("value")},getKey:function(){console.log('[MIG:fixed] SpinWheelSlot: getKey() is no longer supported. Use get("key") instead.');return this.get("key")},setValue:function(a){console.log('[MIG:fixed] SpinWheelSlot: setValue() is no longer supported. Use set("value",x) instead.');return this.set("value",a)}});h.mixin(e,{createDomButton:function(){console.log("[MIG:fixed] dojox.mobile(id\x3d"+
arguments[0].id+"): createDomButton was moved to iconUtils.");return z.createDomButton.apply(this,arguments)}});e=[];g=d.doc.styleSheets;for(b=0;b<g.length;b++)if(!g[b].href&&(m=g[b].cssRules||g[b].imports))for(f=0;f<m.length;f++)m[f].href&&e.push(m[f].href);f=d.doc.getElementsByTagName("link");for(b=0;b<f.length;b++)e.push(f[b].href);for(b=0;b<e.length;b++)-1!==e[b].indexOf("/iphone/")?l="iphone":-1!==e[b].indexOf("/android/")?l="android":-1!==e[b].indexOf("/blackberry/")?l="blackberry":-1!==e[b].indexOf("/custom/")&&
(l="custom"),v.add(d.doc.documentElement,l+"_theme"),e[b].match(/themes\/common\/(FixedSplitter.css)|themes\/common\/(SpinWheel.css)/)&&console.log("[MIG:error] "+(RegExp.$1||RegExp.$2)+" is no longer in the themes/common folder. It is in the device theme folder.");w(function(){dojo.hash&&(console.log("[MIG:fixed] dojo/hash detected. If you would like to enable the bookmarkable feature, require dojox/mobile/bookmarkable instead of dojo/hash"),dojo.require?dojo.require("dojox.mobile.bookmarkable"):
require(["dojox/mobile/bookmarkable"]))});return n});